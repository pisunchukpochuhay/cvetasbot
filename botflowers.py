import asyncio
import logging
import multiprocessing
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError, TelegramConflictError
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ /start
start_message = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"Uflor\"\n"
    "–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–≤–µ–∂–∏—Ö –±—É–∫–µ—Ç–æ–≤\n\n"
    "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã?\n"
    "üåµ 10 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ\n"
    "üåµ –ë–æ–ª–µ–µ 20 –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
    "üåµ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–≤–µ–∂–µ—Å—Ç—å –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤\n\n"
    "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
    "üíê –ë—ã—Å—Ç—Ä–∞—è –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
    "üíê –ë–æ–Ω—É—Å—ã —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏\n"
    "üíê –ó–∞–±–æ—Ç–∞ –æ –∫–∞–∂–¥–æ–º –∫–ª–∏–µ–Ω—Ç–µ\n"
    "üíê –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç\n\n"
    "–î–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ ü•∞\n"
    "https://t.me/+1tfHkcot7YxjY2Ri\n\n"
    "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: –û–∫—Å–∞–Ω–∞‚¨áÔ∏è\n"
    "@Oksana_dostavkacvetov\n"
)

# –ö–Ω–æ–ø–∫–∏
button1 = InlineKeyboardButton(text="üåπ–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Çüåπ", url="https://t.me/Oksana_dostavkacvetov")
button2 = InlineKeyboardButton(text="üå∏–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Çüå∏", url="https://t.me/+1tfHkcot7YxjY2Ri")
keyboard = InlineKeyboardMarkup(inline_keyboard=[[button1], [button2]])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(message: types.Message):
    await message.reply(start_message, reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞
async def run_bot(api_key: str, index: int, failed_bots: list, deleted_bots: set):
    while True:
        try:
            bot = Bot(token=api_key)
            dp = Dispatcher()
            dp.message.register(start, Command(commands=['start']))

            # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–æ–ª–≥–æ–≥–æ –æ–ø—Ä–æ—Å–∞
            await bot.delete_webhook(drop_pending_updates=True)

            logger.info(f"{Fore.GREEN}Bot at line {index + 1} with token {api_key} initialized successfully.{Style.RESET_ALL}")
            await dp.start_polling(bot)
        except TelegramConflictError:
            logger.error(f"{Fore.RED}Conflict error starting bot at line {index + 1} with token {api_key}: Telegram server says - Conflict{Style.RESET_ALL}")
            failed_bots.append(api_key)  # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        except TelegramAPIError as e:
            if "Unauthorized" in str(e):
                logger.error(f"{Fore.RED}Unauthorized error starting bot at line {index + 1} with token {api_key}: {e}{Style.RESET_ALL}")
                if api_key not in deleted_bots:
                    with open('deletedBOT.txt', 'a') as file:
                        file.write(f"{api_key}\n")
                    deleted_bots.add(api_key)  # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
            else:
                logger.error(f"{Fore.RED}Error starting bot at line {index + 1} with token {api_key}: {e}{Style.RESET_ALL}")
                failed_bots.append(api_key)  # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        except Exception as e:
            logger.error(f"{Fore.RED}Unexpected error starting bot at line {index + 1} with token {api_key}: {e}{Style.RESET_ALL}")
            failed_bots.append(api_key)  # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫

        # –ü–∞—É–∑–∞ –Ω–∞ 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        await asyncio.sleep(86400)  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
def run_bot_process(api_key, index, failed_bots, deleted_bots):
    asyncio.run(run_bot(api_key, index, failed_bots, deleted_bots))

def main():
    try:
        with open('api_keys.txt', 'r') as file:
            api_keys = file.readlines()
    except FileNotFoundError:
        logger.error("api_keys.txt file not found.")
        return
    except Exception as e:
        logger.error(f"Error reading api_keys.txt file: {e}")
        return

    manager = multiprocessing.Manager()
    failed_bots = manager.list()
    deleted_bots = manager.list()
    processes = []

    for index, api_key in enumerate(api_keys):
        api_key = api_key.strip()
        if api_key and api_key not in failed_bots:
            process = multiprocessing.Process(target=run_bot_process, args=(api_key, index, failed_bots, deleted_bots))
            process.start()
            processes.append(process)

    for process in processes:
        process.join()

    if failed_bots:
        logger.info(f"Failed to start bots with the following API keys: {failed_bots}")
    logger.info(f"All bots started successfully.")

if __name__ == '__main__':
    main()
